'use strict'
const Logger = use('Logger')
const BaseExceptionHandler = use('BaseExceptionHandler')

/**
 * This class handles all exceptions thrown during
 * the HTTP request lifecycle.
 *
 * @class ExceptionHandler
 */
class ExceptionHandler extends BaseExceptionHandler {
  /**
   * Handle exception thrown during the HTTP lifecycle
   *
   * @method handle
   *
   * @param  {Object} error
   * @param  {Object} options.request
   * @param  {Object} options.response
   *
   * @return {void}
   */
  async handle(error, {request, response}) {
    return response.status(error.status).send(this.mapError(error))
  }

  /**
   * Report exception for logging or debugging.
   *
   * @method report
   *
   * @param  {Object} error
   * @param  {Object} options.request
   *
   * @return {void}
   */
  async report(error, {request}) {}

  mapError(error) {
    const { code } = error
    return {
      code: code,
      message: this.getMessage(error)
    }
  }

  getMessage({ code, message, name, messages }) {

    if (name === 'ValidationException')
      return messages

    if (code == "E_MISSING_DATABASE_ROW")
      return "Data not found"

    if (code == "E_PASSWORD_MISMATCH")
      return "Invalid password"


    return message
  }
}

module.exports = ExceptionHandler
